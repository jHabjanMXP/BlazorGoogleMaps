@using Maps
@using Microsoft.JSInterop

@inherits MapComponent
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div @ref="@Element" id="@Id" class="@CssClass" style="@StyleStr"></div>

@code {
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string ApiKey { get; set; } = string.Empty;

    [Parameter]
    public MapOptions? Options { get; set; }

    [Parameter]
    public EventCallback OnAfterInit { get; set; }

    [Parameter]
    public string? CssClass { get; set; }

    private string _height = "500px";

    /// <summary>
    /// Default height 500px
    /// Used as style atribute "height: {Height}"
    /// </summary>
    [Parameter]
    public string Height
    {
        get => _height;
        set => _height = value ?? "500px";
    }

    private string StyleStr => $"height: {Height};";

    private ElementReference Element { get; set; }
    private IJSObjectReference? _scriptLoaderModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await LoadScriptAsync("_content/BlazorGoogleMaps/js/objectManager.min.js");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        await InitAsync(Element, Options);

        //Debug.WriteLine("Init finished");

        await OnAfterInit.InvokeAsync();
    }

    protected override bool ShouldRender()
    {
        return false;
    }
    
    private async Task<IJSObjectReference> GetJsModuleAsync()
    {
        _scriptLoaderModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/BlazorGoogleMaps/js/script-loader.min.js").AsTask();
        return _scriptLoaderModule;
    }

    private async Task LoadScriptAsync(string scriptPath)
    {
        var jsModule = await GetJsModuleAsync();
        await jsModule.InvokeVoidAsync("BlazorGoogleMaps_LoadScript", scriptPath);
    }


    public async ValueTask DisposeAsync()
    {
        if (_scriptLoaderModule != null)
        {
            await _scriptLoaderModule.DisposeAsync();
        }
        base.DisposeAsync();
    }
}